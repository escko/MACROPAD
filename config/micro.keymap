
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>


#define MICRO 0
#define TOPLEFT 1
#define TOPMIDDLE 2
#define TOPRIGHT 3
#define TOPSPLIT 4
#define CENTERLEFT 5
#define ZOOM 6
#define BLUE 7
#define PROCREATE 8

#define MOUSE_SCROLL_MAX 250

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(MOUSE_SCROLL_MAX)


&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

&mt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
&mwh {
  time-to-max-speed-ms = <0>;
  acceleration-exponent = <0>;
  delay-ms = <0>;
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };
};

// Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <36>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-names = "default";
};

/ { 

    combos {
    compatible = "zmk,combos";           
    TOPLEFT {
        timeout-ms = <100>;
        key-positions = <0 1>;
        bindings = <&mo 1>;
        };
    TOPMIDDLE {
        timeout-ms = <100>;
        key-positions = <1 2>;
        bindings = <&mo 2>;
        };
    TOPRIGHT {
        timeout-ms = <100>;
        key-positions = <2 3>;
        bindings = <&mo 3>;
        };
    TOPSPLIT {
        timeout-ms = <120>;
        key-positions = <0 3>;
        bindings = <&mo 4>;
        };
    CENTERLEFT {
        timeout-ms = <100>;
        key-positions = <4 5>;
        bindings = <&mo 5>;
        };
    ZOOM {
      timeout-ms = <110>;
      key-positions = <0 1 2>;
      bindings = <&mo 6>;
      };
    K_I {
        timeout-ms = <100>;
        key-positions = <1 7>;
        bindings = <&kp I>;
        };
    K_T {
        timeout-ms = <100>;
        key-positions = <2 7>;
        bindings = <&kp T>;
        };
    K_Y {
        timeout-ms = <100>;
        key-positions = <6 10>;
        bindings = <&kp Y>;
        };
    K_F {
        timeout-ms = <100>;
        key-positions = <4 5 6>;
        bindings = <&kp F>;
        };
    K_H{
        timeout-ms = <100>;
        key-positions = <5 6>;
        bindings = <&kp H>;
        };
    RESET {
        timeout-ms = <100>;
        key-positions = <4 5 6 8>;
        bindings = <&sys_reset>;
        };
    };
    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |
behaviors {
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_SCROLL";
      #sensor-binding-cells = <2>;
      bindings = <&mwh>, <&mwh>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_KP";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
    mtt: mod_tap_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&kp>;
      }; 
    mkp_kp: mouse_click {
      compatible = "zmk,behavior-hold-tap";
      label = "MOUSE_CLICK";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&kp>;
      };       
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "RGB_ENCODER";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
  };

    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |

 keymap {
    compatible = "zmk,keymap";

    MICRO {
    label = "MICRO";
    bindings = <     
    &kp Q &kp W &kp E &mt SPACE R                 
    &kp A &kp S &kp D &mt LSHFT LG(N0)        
    &mt LCTRL Z &mt RALT X &mt LCMD C>;
    
    sensor-bindings = <&rot_kp DOWN UP>; };
    
    TOPLEFT {
    label = "TOPLEFT";    
    bindings = <
    &none &none &kp LG(G) &kp G  
    &none &none &kp LS(LG(X)) &mt LSHFT LS(LG(C))                       
    &mt LCTRL LG(Z) &mt RALT LG(X) &mt LCMD LG(C)>;
    
    sensor-bindings = <&rot_kp LG(N1) LG(N4)>; };

    TOPMIDDLE {
    label = "TOPMIDDLE";
    bindings = <
    &kp LSHFT &none &none &mt SPACE R
    &kp LA(LG(V)) &none &kp V &mt LSHFT LG(N0)
    &kp LCTRL &kp RALT &kp LCMD>;
    
    sensor-bindings = <&rot_scroll SCROLL_DOWN SCROLL_UP>; };

    TOPRIGHT {
    label = "TOPRIGHT";
    bindings = <
    &kp LSHFT &none &none &none
    &kp LSHFT  &none &none &kp LG(N0)
    &kp LCTRL &kp RALT &kp LCMD>;
    
    sensor-bindings = <&rot_kp LG(E) LS(LG(E))>; };

    TOPSPLIT {
    label = "TOPSPLIT";
    bindings = <
    &none &none &none &none
    &kp LSHFT  &none &none &kp LG(MINUS)
    &kp LCTRL &kp RALT &kp LCMD>;
    
    sensor-bindings = <&rot_kp N1 N4>; };

    CENTERLEFT {
    label = "CENTERLEFT";
    bindings = <
    &mo BLUE &tog 8 &mtt LC(LA(LS(LG(X)))) LC(LA(LS(LG(Z)))) &mtt LC(LA(LS(LG(C)))) LC(LA(LS(LG(V))))            
    &none &none &mtt LC(LS(DOWN)) LC(LS(UP)) &kp C_PLAY_PAUSE
    &mt LCTRL LC(LA(LG(Z))) &mt RALT LG(LC(LA(X))) &mt LCMD LG(LC(LA(C)))>; 
    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    ZOOM {
    label = "ZOOM";
    bindings = <
    &none &none &none &mkp MCLK
    &none &none &none &kp LG(N0)
    &kp LCTRL &kp RALT &kp LC(LA(LS(LG(A))))>;
    
    sensor-bindings = <&rot_kp LG(MINUS) LG(LS(SEMICOLON))>; };
            
    BLUE {
    label = "BLUE";
    bindings = <
    &none &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_SAI
    &bt BT_SEL 0 &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_SAD      
    &bt BT_CLR &out OUT_TOG &ext_power EP_TOG>;
    
    sensor-bindings = <&rgb_encoder>; };

    PROCREATE {
    label = "PROCREATE";
    bindings = <
    &mt LCTRL L &kp B &kp E &mt LC(BACKSPACE) LC(Z)          
    &kp LC(SEMICOLON) &kp V &kp S &kp LSHFT      
    &mt LSHFT V &mt RALT X &mt LCMD C>;
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };
    };
};