#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ARTSTUDIO 0
#define KRITA 1
#define ENCODER 2
#define INFINITE 3
#define LAYERS 4
#define ROTATE 5
#define VIEW 6
#define HISTORY 7
#define CENTERLEFT 8
#define MEDIA 9
#define VOLUME 10
#define BLUE 11


&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

&mt {
    tapping-term-ms = <140>;
    quick-tap-ms = <120>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 130    // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

  // Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <18>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};

/ { 
behaviors {
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP0";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <120>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <170>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <300>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP0";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "MKP_KP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "MOUSE_CLICK1";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&mkp>;
      };        
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "RGB_ENCODER";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };      
    EE_CUTUNDO: EE_CUT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(X)>;
            mods = <(MOD_LSFT)>;
      };
    EE_CUT: CCMDZ {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&EE_CUTUNDO>, <&kp LG(Z)>;
            mods = <(MOD_LGUI|MOD_RALT)>;
      };
    A_ACUT: A_ACUT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LG(X)>;
            mods = <(MOD_LSFT)>;
      };
    M_MCUT: M_MCUT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp LG(X)>;
            mods = <(MOD_LSFT)>;
      };
    D_DPASTE: S_SPASTE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp LG(V)>;
            mods = <(MOD_LSFT)>;
      };
    W_WPASTE: W_WPASTE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LG(V)>;
            mods = <(MOD_LSFT)>;
      };
    F_FCOPY: F_FCOPY {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LG(C)>;
            mods = <(MOD_LSFT)>;
      };
    E_CMDZ: E_CMDZ {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(Z)>;
            mods = <(MOD_LALT)>;
      };
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_SCROLL";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      tap-ms = <33>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_KP";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
    HWU: HWU {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-while-undecided;
      };
  };

    //  | SW1 - 0 | SW2 -  1 | SW3 - 2 | SW4 - 3 |
    //  | SW5 - 4 | SW6 -  5 | SW7 - 6 | SW8 - 7 | SW9 - 8 |
    //            | SW10 - 9 | SW11-10 | SW12-11 |
combos {
    compatible = "zmk,combos";
    KRITA {
    timeout-ms = <50>;
    key-positions = <0 1 2 10>;
    bindings = <&tog KRITA>;
      }; 
    INFINITE {
    timeout-ms = <50>;
    key-positions = <4 5 6 10>;
    bindings = <&tog INFINITE>;
      };
    LAYERS {
    timeout-ms = <50>;
    key-positions = <0 1 2>;
    bindings = <&mo LAYERS>;
      };
    POLYGON_LASSO {
    timeout-ms = <50>;
    key-positions = <0 1>;
    bindings = <&kp I>;
      };
    MOVE {
    timeout-ms = <50>;
    key-positions = <1 2>;
    bindings = <&kp J>;
      };
    HISTORY {
    timeout-ms = <50>;
    key-positions = <0 4>;
    bindings = <&mo HISTORY>;
      };
    VIEW {
    timeout-ms = <50>;
    key-positions = <0 1 2 3>;
    bindings = <&lt VIEW LG(N0)>;
      };
    ROTATE {
    timeout-ms = <50>;
    key-positions = <0 3>;
    bindings = <&lt ROTATE LG(EQUAL)>;
      };
    TRANSFORM {
    timeout-ms = <50>;
    key-positions = <1 2 3>;
    bindings = <&kp T>;
      }; 
    CENTERLEFT {
    timeout-ms = <50>;
    key-positions = <4 5>;
    bindings = <&mo CENTERLEFT>;
      };
    BLUE {
    timeout-ms = <50>;
    key-positions = <9 10>;
    bindings = <&mo BLUE>;
      };
    ELLIPSE {
    timeout-ms = <50>;
    key-positions = <1 3>;
    bindings = <&mt2 K LG(K)>;
      };
    MARQUEE {
    timeout-ms = <50>;
    key-positions = <0 2>;
    bindings = <&mt2 M LG(M)>;
      };
    LASSO {
    timeout-ms = <50>;
    key-positions = <2 3>;
    bindings = <&kp L>;
      };
    LA_LG_R {
    timeout-ms = <50>;
    key-positions = <3 8 11>;
    bindings = <&kp LA(LG(R))>;
      };
    LG_L {
    timeout-ms = <50>;
    key-positions = <2 3 8>;
    bindings = <&kp LA(L)>;
      };
    INVERT {
    timeout-ms = <50>;
    key-positions = <2 3 11>;
    bindings = <&kp LS(LG(I))>;
      };
    LG_W {
    timeout-ms = <50>;
    key-positions = <1 8>;
    bindings = <&kp LA(W)>;
      };
    LA_LG_J {
    timeout-ms = <50>;
    key-positions = <1 2 8 11>;
    bindings = <&kp LA(LG(J))>;
      };
    COMBO_Y {
    timeout-ms = <50>;
    key-positions = <2 3 8 11>;
    bindings = <&kp Y>;
      };
    LS_LGUI {
    timeout-ms = <50>;
    key-positions = <0 8>;
    bindings = <&kp LS(LALT)>;
      };
    LS_LALT {
    timeout-ms = <50>;
    key-positions = <0 11>;
    bindings = <&kp LS(LGUI)>;
      };
    LS_LA_LGUI {
    timeout-ms = <50>;
    key-positions = <0 8 11>;
    bindings = <&kp LS(LA(LGUI))>;
      };
    LG_E {
    timeout-ms = <50>;
    key-positions = <2 8>;
    bindings = <&kp LA(E)>;
      };
    LA_W {
    timeout-ms = <50>;
    key-positions = <1 11>;
    bindings = <&kp LG(W)>;
      };
    LG_R {
    timeout-ms = <50>;
    key-positions = <3 8>;
    bindings = <&kp LA(R)>;
      };
    LA_R {
    timeout-ms = <50>;
    key-positions = <3 11>;
    bindings = <&kp LG(R)>;
      };
    COMBO_G {
    timeout-ms = <50>;
    key-positions = <5 6>;
    bindings = <&kp G>;
      };
    COMBO_P {
    timeout-ms = <50>;
    key-positions = <4 6>;
    bindings = <&kp P>;
      };
    COMBO_S {
    timeout-ms = <50>;
    key-positions = <4 5 6>;
    bindings = <&kp S>;
      };
    LA_LGUI {
    timeout-ms = <100>;
    key-positions = <8 11>;
    bindings = <&HWU LA(LGUI) B>;
      };
    SETTINGS {
    timeout-ms = <50>;
    key-positions = <9 11>;
    bindings = <&kp LG(COMMA)>;
      };
    };
    // | SW1 - 0 | SW2 -  1 | SW3 - 2 | SW4 - 3 |
    // | SW5 - 4 | SW6 -  5 | SW7 - 6 | SW8 - 7 | SW9 - 8 |
    //           | SW10 - 9 | SW11-10 | SW12-11 |
 keymap {
    compatible = "zmk,keymap";
    ARTSTUDIO {
    bindings = <
    &mt LSHFT Q &kp W &mt U E &HWU LC(LALT) R
    &lt MEDIA A &kp D &kp F &tog ENCODER &HWU LALT C 
    &mt1 LCTRL Z &HWU LSHFT V &HWU LGUI X>;   
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    KRITA {
    bindings = <
    &mt LSHFT Q &kp W &mt U E &HWU R N5
    &lt MEDIA A &kp D &kp F &tog ENCODER &HWU LGUI C 
    &mt1 LCTRL Z &HWU LSHFT V &HWU LALT X>;   
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    ENCODER {
    bindings = <
    &trans &trans &trans &trans
    &trans &trans &trans &trans &trans
    &trans &trans &trans>;
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    INFINITE {
    bindings = <     
    &mt LSHFT LS(B) &kp K &E_CMDZ &HWU O B       
    &lt MEDIA M &kp W &kp F &mt1 LG(U) LG(B) &HWU LALT C  
    &mt1 BACKSLASH SLASH &HWU LSHFT T &HWU LGUI V>;       
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    LAYERS {     
    bindings = <
    &none &none &none &mt0 LG(D) ENTER
    &none &none &mt3 LS(LA(LG(E))) LS(LA(E)) &mt2 LS(LG(B)) LG(B) &mt2 LS(N) N                       
    &mt2 ESCAPE N7 &HWU LSHFT N6 &mt2 LS(M) LG(M) >;
    sensor-bindings = <&rot_kp LG(N1) LG(N4)>; };

    ROTATE {
    bindings = <
    &none &none &none &none
    &none &none &none &kp LA(LG(N0)) &HWU SPACE LG(N0)
    &kp LS(EQUAL) &kp LC(EQUAL) &mt1 H LG(EQUAL)>;
    sensor-bindings = <&rot_kp N1 N4>; };

    VIEW {
    bindings = <
    &none &none &none &none
    &none &none &none &kp TAB &HWU SPACE LG(N0)
    &HWU LCTRL LS(V) &kp LS(H) &mt1 LS(LG(N0)) H>;
    sensor-bindings = <&rot_kp LG(MINUS) LS(LG(SEMI))>; };

    HISTORY {
    bindings = <
    &none &none &none &none
    &none &none &none &none &none
    &none &none &none>;
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    CENTERLEFT {
    bindings = <
    &none &none &kp LC(LA(LS(LEFT))) &kp LC(LA(LS(RIGHT))) 
    &none &none &mt1 LC(LA(LS(LG(DOWN)))) LC(LA(LS(LG(UP)))) &none &mt1 LC(LA(LS(SINGLE_QUOTE))) LC(LA(LS(SEMI)))  
    &kp LC(LA(LS(INT1))) &kp LC(LA(LS(SLASH))) &mt1 LC(LA(LS(DOWN))) LC(LA(LS(UP)))>;      
    sensor-bindings = <&rot_kp LC(LA(LS(N))) LC(LA(LS(M)))>; };

    MEDIA {
    bindings = <
    &none &bt BT_SEL 1 &bt BT_SEL 0 &mt1 F4 LC(LA(LS(Z)))
    &none &none &none &kp LC(LA(LS(P))) &lt VOLUME C_PLAY_PAUSE
    &none &mt1 LC(LA(LS(V))) LC(LA(LS(W))) &mt LC(LA(LS(C))) LC(LA(LS(X)))>;    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };
        
    VOLUME {
    bindings = <
    &none &none &none &none 
    &none &none &none &none &none
    &none &none &none>;    
    sensor-bindings = <&rot_kp C_VOL_DN C_VOL_UP>; };
            
    BLUE {
    bindings = <
    &bt BT_SEL 0 &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_EFF
    &bt BT_SEL 1 &rgb_ug RGB_BRD &rgb_ug RGB_SAD &bt BT_CLR_ALL &ext_power EP_TOG    
    &none &none &out OUT_TOG>;    
    sensor-bindings = <&rgb_encoder>; };
    };
};


