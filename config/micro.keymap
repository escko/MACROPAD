#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define KRITA 0
#define ARTSTUDIO 1
#define ENCODER 2
#define INFINITE 3
#define LAYERS 4
#define ROTATE 5
#define VIEW 6
#define VIEW2 7
#define HISTORY 8
#define CENTERLEFT 9
#define MEDIA 10
#define BLUE 11

&lt {
    tapping-term-ms = <135>;
    quick-tap-ms = <100>;
};

&mt {
    tapping-term-ms = <135>;
    quick-tap-ms = <100>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 130   // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

  // Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <18>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};


/ { 
behaviors {
    motap: motap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <300>;
      quick-tap-ms = <0>;
      hold-while-undecided;
      bindings = <&mo>, <&kp>;
      };
    hwu: hwu {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };
    mtr: mtr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <230>;
      quick-tap-ms = <0>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };
    mtrv: mtrv {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <230>;
      quick-tap-ms = <100>;
      hold-while-undecided;
      bindings = <&kp>, <&kp>;
      };
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <120>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <145>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred"; // was hold-preferred
      tapping-term-ms = <300>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    mt4: mt4 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <380>;
      quick-tap-ms = <100>;
      bindings = <&kp>, <&kp>;
      };
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "hold-preferred";
      bindings = <&mkp>, <&mkp>;
      };       
    mm_rshift: mm_rshift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hwu RSHFT R>, <&kp R>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_LSFT|MOD_LGUI)>;
      };   
    e_cmdz: e_cmdz {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(Z)>;
            mods = <(MOD_LALT)>;
      };     
    EE_CUTUNDO: EE_CUT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LG(X)>;
            mods = <(MOD_LSFT)>;
      };
    EE_CUT: CCMDZ {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&EE_CUTUNDO>, <&kp LG(Z)>;
            mods = <(MOD_LGUI|MOD_RALT)>;
      };
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      tap-ms = <33>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
  };

    //  |SW1- 0 |SW2- 1 |SW3- 2 |SW4-   3 |
    //  |SW5- 4 |SW6- 5 |SW7- 6 |SW8-   7 |SW9-   8 |
    //                 |SW10- 9 |SW11- 10 |SW12- 11 |
combos {
    compatible = "zmk,combos";
    ARTSTUDIO {
    timeout-ms = <50>;
    key-positions = <0 1 2 9>;
    bindings = <&tog ARTSTUDIO>;
      }; 
    INFINITE {
    timeout-ms = <50>;
    key-positions = <4 5 6 9>;
    bindings = <&tog INFINITE>;
      };
    LAYERS {
    timeout-ms = <50>;
    key-positions = <0 1>;
    bindings = <&motap LAYERS H>;
      };
    MEDIA {
    timeout-ms = <50>;
    key-positions = <0 4>;
    bindings = <&motap MEDIA B>;
      };
    MOVE {
    timeout-ms = <50>;
    key-positions = <1 2>;
    bindings = <&kp J>;
      };
    ESCAPE_PIN {
    timeout-ms = <50>;
    key-positions = <0 1 2 3 8>;
    bindings = <&mt4 LS(LC(LA(LG(N1)))) ESCAPE>;
      };
    TAB_ {
    timeout-ms = <50>;
    key-positions = <0 3 11>;
    bindings = <&kp TAB>;
      };
    LAYER_SELECT {
    timeout-ms = <50>;
    key-positions = <1 2 8 11>;
    bindings = <&kp LA(LG(J))>;
      };
    HISTORY {
    timeout-ms = <50>;
    key-positions = <2 5>;
    bindings = <&mo HISTORY>;
      };
    VIEW {
    timeout-ms = <50>;
    key-positions = <0 1 2 3>;
    bindings = <&motap VIEW LG(N0)>;
      };
    VIEW2 {
    timeout-ms = <50>;
    key-positions = <0 1 2>;
    bindings = <&motap VIEW2 LG(N0)>;
      };
    ROTATE {
    timeout-ms = <50>;
    key-positions = <0 3>;
    bindings = <&motap ROTATE LG(EQUAL)>;
      };
    TRANSFORM {
    timeout-ms = <50>;
    key-positions = <1 2 3>;
    bindings = <&kp T>;
      }; 
    CENTERLEFT {
    timeout-ms = <50>;
    key-positions = <4 5>;
    bindings = <&motap CENTERLEFT Z>;
      };
    BLUE {
    timeout-ms = <50>;
    key-positions = <4 9>;
    bindings = <&mo BLUE>;
      };
    ELLIPSE {
    timeout-ms = <50>;
    key-positions = <1 3>;
    bindings = <&kp K>;
      };
    MARQUEE {
    timeout-ms = <50>;
    key-positions = <0 2>;
    bindings = <&kp M>;
      };
    LASSO {
    timeout-ms = <50>;
    key-positions = <2 3>;
    bindings = <&kp L>;
      };
    COMMAND_L {
    timeout-ms = <50>;
    key-positions = <2 3 8>;
    bindings = <&kp LG(L)>;
      };
    //  |SW1- 0 |SW2- 1 |SW3- 2 |SW4-   3 |
    //  |SW5- 4 |SW6- 5 |SW7- 6 |SW8-   7 |SW9-   8 |
    //                 |SW10- 9 |SW11- 10 |SW12- 11 |
    CONTROL_SHIFT {
    timeout-ms = <50>;
    key-positions = <4 10>;
    bindings = <&kp LC(LSHFT)>;
      };
    CONTROL_OPTION {
    timeout-ms = <50>;
    key-positions = <4 11>;
    bindings = <&kp LC(LALT)>;
      };
    CONTROL_COMMAND {
    timeout-ms = <50>;
    key-positions = <4 8>;
    bindings = <&kp LC(LGUI)>;
      };
    SHIFT_OPTION {
    timeout-ms = <50>;
    key-positions = <0 11>;
    bindings = <&kp LS(LALT)>;
      };
    SHIFT_LGUI {
    timeout-ms = <50>;
    key-positions = <0 8>;
    bindings = <&kp LS(LGUI)>;
      };
    SHIFT_OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = <0 8 11>;
    bindings = <&kp LS(LA(LGUI))>;
      };
    CONTROL_OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = <4 8 11>;
    bindings = <&kp LC(LA(LGUI))>;
      };
    OPTION_COMMAND_R {
    timeout-ms = <50>;
    key-positions = <3 8 11>;
    bindings = <&kp LA(LG(R))>;
      };
    OPTION_COMMAND_F {
    timeout-ms = <50>;
    key-positions = <6 8 11>;
    bindings = <&kp LA(LG(F))>;
      };
    COMMAND_E {
    timeout-ms = <50>;
    key-positions = <2 8>;
    bindings = <&kp LG(E)>;
      };
    COMMAND_R {
    timeout-ms = <50>;
    key-positions = <3 8>;
    bindings = <&kp LG(R)>;
      };
    SHIFT_R {
    timeout-ms = <50>;
    key-positions = <3 10>;
    bindings = <&kp LS(R)>;
      };
    OPTION_R {
    timeout-ms = <50>;
    key-positions = <3 11>;
    bindings = <&kp LA(R)>;
      };
    G_ {
    timeout-ms = <50>;
    key-positions = <5 6>;
    bindings = <&kp G>;
      };
    P_ {
    timeout-ms = <50>;
    key-positions = <4 6>;
    bindings = <&kp P>;
      };
    COMMAND_F {
    timeout-ms = <50>;
    key-positions = <6 8>;
    bindings = <&kp LG(F)>;
      };
    OPTION_F {
    timeout-ms = <50>;
    key-positions = <6 11>;
    bindings = <&kp LA(F)>;
      };
    S_ {
    timeout-ms = <50>;
    key-positions = <4 5 6>;
    bindings = <&kp S>;
      };
    OPTION_COMMAND {
    timeout-ms = <50>;
    key-positions = <8 11>;
    bindings = <&hwu LA(LGUI) N4>;
      };
    SETTINGS {
    timeout-ms = <50>;
    key-positions = <9 10>;
    bindings = <&kp LG(COMMA)>;
      };
    };
    //  |SW1- 0 |SW2- 1 |SW3- 2 |SW4-   3 |
    //  |SW5- 4 |SW6- 5 |SW7- 6 |SW8-   7 |SW9-   8 |
    //                 |SW10- 9 |SW11- 10 |SW12- 11 |
 keymap {
    compatible = "zmk,keymap";

    KRITA {
    bindings = <
    &kp Q &kp W &kp E &mm_rshift
    &hwu LCTRL A &kp D &kp F &motap ENCODER C_PLAY_PAUSE &hwu LGUI C 
    &mt1 LS(LCTRL) Y &hwu LSHFT V &hwu LALT X>;
    sensor-bindings = <&rot_kp UP DOWN>; };

    ARTSTUDIO {
    bindings = <
    &kp Q &kp W &kp E &hwu LC(LALT) R
    &hwu LCTRL A &kp D &kp F &motap ENCODER C_PLAY_PAUSE &hwu LALT C
    &mt1 LS(LCTRL) Y &hwu LSHFT V &hwu LGUI X>;   
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    ENCODER {
    bindings = <
    &trans &trans &trans &trans
    &trans &trans &trans &trans &trans
    &trans &trans &trans>;
    sensor-bindings = <&rot_kp C_VOL_DN C_VOL_UP>; };

    INFINITE {
    bindings = <     
    &mt1 P LS(B) &kp K &e_cmdz &mtr O B       
    &mt1 BACKSLASH SLASH &kp W &kp F &motap ENCODER C_PLAY_PAUSE &hwu LALT C  
    &mt3 LG(U) LG(B) &hwu LSHFT T &hwu LGUI V>;       
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    LAYERS {     
    bindings = <
    &none &none &mt3 LS(LG(D)) LS(LG(I)) &mt LG(D) ENTER
    &none &mt3 COLON SEMI &mt3 LG(U) LG(B) &mt3 LS(LG(B)) LS(LG(U)) &mt3 LGUI N                       
    &kp U &mt3 LSHFT I &mt3 LALT LG(M)>;
    sensor-bindings = <&rot_kp N1 N5>; };
    
    ROTATE {
    bindings = <
    &none &none &none &none
    &none &none &none &kp LA(LG(N0)) &mtrv SPACE LG(N0)
    &kp LS(EQUAL) &kp LG(EQUAL) &mtrv LS(SPACE) LG(EQUAL)>;
    sensor-bindings = <&rot_kp COMMA PERIOD>; };

    VIEW {
    bindings = <
    &none &none &none &none
    &none &kp N9 &kp N8 &kp TAB &mtrv SPACE LG(N0)
    &hwu LCTRL N7 &mt3 LS(H) N6 &mtrv V H>;
    sensor-bindings = <&rot_scroll SCRL_DOWN SCRL_UP>; };

    VIEW2 {
    bindings = <
    &none &none &none &mtrv SLASH LG(EQUAL)
    &none &kp N9 &kp N8 &kp TAB &kp LA(SPACE)
    &hwu LCTRL N7 &mt3 LS(H) N6 &mtrv SPACE LG(N0)>;
    sensor-bindings = <&rot_kp LS(LG(SEMI)) LG(MINUS)>; };

    HISTORY {
    bindings = <
    &none &none &none &none
    &none &none &none &none &none
    &none &none &none>;
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    CENTERLEFT {
    bindings = <
    &none &none &kp LC(LA(LS(LEFT))) &kp LC(LA(LS(RIGHT)))
    &none &none &mt1 LC(LA(LS(SINGLE_QUOTE))) LC(LA(LS(SEMI))) &none &mt1 LC(LA(LS(LG(DOWN)))) LC(LA(LS(LG(UP))))  
    &mt1 LC(LA(LS(PERIOD))) LC(LA(LS(SLASH))) &kp LC(LA(LS(UP))) &kp LC(LA(LS(DOWN)))>;      
    sensor-bindings = <&rot_kp LC(LA(LS(N))) LC(LA(LS(M)))>; };

    MEDIA {
    bindings = <
    &none &bt BT_SEL 0 &kp F4 &kp LG(C_BRI_DN)
    &none &bt BT_SEL 1 &none &kp LS(LA(LG(BACKSLASH))) &mt3 LC(LA(LS(W))) LC(LA(LS(X))) 
    &mt3 LG(W) LA(P) &kp LC(LA(LS(V))) &kp LC(LA(LS(C)))>;    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };
            
    BLUE {
    bindings = <
    &rgb_ug RGB_EFF &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_EFF
    &none &rgb_ug RGB_BRD &rgb_ug RGB_SAD &bt BT_CLR_ALL &ext_power EP_TOG    
    &none &none &out OUT_TOG>;
    sensor-bindings = <&rgb_encoder>; };
    };
};