
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>


#define INFINITE 0
#define ARTSTUDIO 1
#define FRESCO 2
#define LAYERS 3
#define CONTROLS 4
#define VOLUME 5
#define BLUE 6



&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

&mt {
    tapping-term-ms = <150>;
    quick-tap-ms = <140>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 300    // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;      // 300
    delay-ms = <0>;                   // 0
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

// Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <36>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};

/ { 
behaviors {
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_SCROLL";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_KP";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP0";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <120>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <160>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP2";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <170>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt4: mt4 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <220>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt5: mt5 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <250>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP0";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "MKP_KP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "MOUSE_CLICK1";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&mkp>;
      };        
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "RGB_ENCODER";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
  };
    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |
combos {
    compatible = "zmk,combos";
    INFINITE {
    timeout-ms = <100>;
    key-positions = <4 5 6 10>;
    bindings = <&tog 0>;
      }; 
    ARTSTUDIO {
    timeout-ms = <100>;
    key-positions = <4 5 6 9>;
    bindings = <&tog 1>;
      };
    FRESCO {
    timeout-ms = <100>;
    key-positions = <4 5 6 8>;
    bindings = <&tog 2>;
      };          
    LAYERS {
    timeout-ms = <100>;
    key-positions = <0 1>;
    bindings = <&mo 3>;
      };
    CONTROLS {
    timeout-ms = <100>;
    key-positions = <4 5 6>;
    bindings = <&mo 4>;
      };
    VOLUME {
    timeout-ms = <100>;
    key-positions = <0 3>;
    bindings = <&mo 5>;
      };
    POLYLASSO {
    timeout-ms = <100>;
    key-positions = <0 1 2 3>;
    bindings = <&kp SEMICOLON>;
      };
    K_I {
    timeout-ms = <100>;
    key-positions = <0 2>;
    bindings = <&kp I>;
      };
    K_O {
    timeout-ms = <100>;
    key-positions = <1 3>;
    bindings = <&kp O>;
      };
    MOVE {
    timeout-ms = <100>;
    key-positions = <1 2>;
    bindings = <&kp J>;
      };
    SPACEBAR {
    timeout-ms = <100>;
    key-positions = <0 1 2>;
    bindings = <&kp SPACEBAR>;
      };
    ELASTIFY_MARQUEE {
    timeout-ms = <100>;
    key-positions = <1 2 3>;
    bindings = <&mt5 M Y>;
      };
    INVERT {
    timeout-ms = <100>;
    key-positions = <2 3 9>;
    bindings = <&kp LS(LG(I))>;
      };
    V_L {
    timeout-ms = <100>;
    key-positions = <2 3>;
    bindings = <&mt4 V L>;
      };
    ZOOM {
    timeout-ms = <100>;
    key-positions = <3 7>;
    bindings = <&mt1 Z LG(0)>;
      };
    K_G {
    timeout-ms = <100>;
    key-positions = <3 7>;
    bindings = <&kp G>;
      };
    };
    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |
 keymap {
    compatible = "zmk,keymap";

    INFINITE {
    label = "INFINITE";
    bindings = <     
    &mt4 H LS(B) &kp K &kp E &mt1 O B        
    &kp F &kp G &kp W &mt LALT C     
    &mt4 BACKSLASH SLASH &mt1 LSHFT P &mt1 LCMD T>;   
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    ARTSTUDIO {
    label = "ARTSTUDIO";
    bindings = <     
    &mt3 H R &mt3 K Q &kp E &mt1 LC(LALT) B        
    &kp F &kp A &kp W &mt LALT C     
    &mt4 BACKSLASH SLASH &mt1 LSHFT COMMA &mt1 LCMD T>;   
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    FRESCO {
    label = "FRESCO";
    bindings = <
    &mt4 H B &kp V &kp E &mt3 LSHFT P          
    &kp G &kp LG(T) &mt4 W L &mt3 LALT LS(F)      
    &mt3 LG(L) LG(LS(BACKSPACE)) &mt3 LSHFT LG(COMMA) &mt3 LCMD I>;
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };
    
    LAYERS {
    label = "LAYERS";    
    bindings = <
    &none &none &kp LG(D) &kp ENTER  
    &none &none &none &mt LALT LG(Z)                       
     &mt3 LG(V) LG(X) &mt3 LG(V) LG(C) &mt3 LCMD LS(LG(Z))>;
    
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    CONTROLS {
    label = "CONTROLS";
    bindings = <
    &none &none &none &none
    &kp F19 &kp LC(LA(LS(LG(W)))) &mt3 LG(INT1) LC(LA(LG(V))) &mt3 LSHFT C_PLAY_PAUSE   
    &mt3 LCTRL LC(LA(LG(Z))) &mt3 RALT LG(LC(LA(X))) &mt3 LCMD LG(LC(LA(C)))>;
    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    VOLUME {
    label = "VOLUME";
    bindings = <
    &none &none &none &none
    &none &none &none &kp C_PLAY_PAUSE
    &kp RCTRL &kp LALT &kp RCMD>;
    sensor-bindings = <&rot_kp C_VOL_DN C_VOL_UP>; };
            
    BLUE {
    label = "BLUE";
    bindings = <
    &none &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_SAI
    &bt BT_SEL 0 &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_SAD      
    &bt BT_CLR &out OUT_TOG &ext_power EP_TOG>;
    
    sensor-bindings = <&rgb_encoder>; };
    };
};