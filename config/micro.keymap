
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ARTSTUDIO 0
#define INFINITE 1
#define FRESCO 2
#define LAYERS 3
#define UNDO_COPY 4
#define VIEW 5
#define ROTATE 6
#define MEDIA 7
#define BLUE 8

&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

&mt {
    tapping-term-ms = <150>;
    quick-tap-ms = <140>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 300    // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;      // 300
    delay-ms = <0>;                   // 0
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

// Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <18>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};

/ { 
behaviors {
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_SCROLL";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_KP";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP0";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <120>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <160>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP2";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <170>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt4: mt4 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <220>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt5: mt5 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <250>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP0";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "MKP_KP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "MOUSE_CLICK1";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&mkp>;
      };        
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "RGB_ENCODER";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
  };
    //  | SW1 - 0 | SW2 -  1 | SW3 - 2 | SW4 - 3 |
    //  | SW5 - 4 | SW6 -  5 | SW7 - 6 | SW8 - 7 | SW9 - 8 |
    //            | SW10 - 9 | SW11-10 | SW12-11 |
combos {
    compatible = "zmk,combos";
    INFINITE {
    timeout-ms = <100>;
    key-positions = <4 5 6 11>;
    bindings = <&tog 1>;
      };
    FRESCO {
    timeout-ms = <100>;
    key-positions = <4 5 6 10>;
    bindings = <&tog 2>;
      };
    LAYERS {
    timeout-ms = <100>;
    key-positions = <0 1>;
    bindings = <&mo 3>;
      };
    UNDO_COPY {
    timeout-ms = <100>;
    key-positions = <0 1 2>;
    bindings = <&mo 4>;
      };
    VIEW {
    timeout-ms = <100>;
    key-positions = <0 1 2 3>;
    bindings = <&mo 5>;
      };
    ROTATE {
    timeout-ms = <100>;
    key-positions = <0 3>;
    bindings = <&mo 6>;
      };
    MEDIA {
    timeout-ms = <100>;
    key-positions = <4 5 6>;
    bindings = <&mo 7>;
      };
    MOVE {
    timeout-ms = <100>;
    key-positions = <1 2>;
    bindings = <&kp J>;
      };
    TRANSFORM {
    timeout-ms = <100>;
    key-positions = <1 2 3>;
    bindings = <&kp V>;
      };
    LASSO {
    timeout-ms = <100>;
    key-positions = <2 3>;
    bindings = <&kp L>;
      };
    POLYGON_LASSO {
    timeout-ms = <100>;
    key-positions = <2 3 8>;
    bindings = <&kp I>;
      };
    ELASTIFY {
    timeout-ms = <100>;
    key-positions = <2 3 11>;
    bindings = <&kp Y>;
      };
    ELLIPSE {
    timeout-ms = <100>;
    key-positions = <0 2>;
    bindings = <&kp O>;
      };
    MARQUEE {
    timeout-ms = <100>;
    key-positions = <1 3>;
    bindings = <&kp M>;
      };
    K_U {
    timeout-ms = <100>;
    key-positions = <2 8>;
    bindings = <&kp U>;
      };
    FILL {
    timeout-ms = <100>;
    key-positions = <3 8>;
    bindings = <&kp F>;
      };
    ENCLOSEFILL {
    timeout-ms = <100>;
    key-positions = <1 2 3 8 11>;
    bindings = <&kp LS(LG(F))>;
      };
    PATHTOOLFILL {
    timeout-ms = <100>;
    key-positions = <2 3 8 11>;
    bindings = <&kp LS(F)>;
      };
    POLYGON {
    timeout-ms = <100>;
    key-positions = <3 8 11>;
    bindings = <&kp LG(I)>;
      };
    K_G {
    timeout-ms = <100>;
    key-positions = <4 5>;
    bindings = <&kp G>;
      };
    K_P {
    timeout-ms = <100>;
    key-positions = <5 6>;
    bindings = <&kp P>;
      };
    K_K {
    timeout-ms = <100>;
    key-positions = <5 6 11>;
    bindings = <&kp K>;
      };
    SPACEBAR {
    timeout-ms = <100>;
    key-positions = <0 1 2 3 8>;
    bindings = <&kp SPACE>;
      };
    ZOOM {
    timeout-ms = <100>;
    key-positions = <0 1 2 3 11>;
    bindings = <&kp Z>;
      };
    HUION {
    timeout-ms = <100>;
    key-positions = <0 4 8 11>;
    bindings = <&kp LC(LA(LS(Z)))>;
      };
    RESET {
    timeout-ms = <100>;
    key-positions = <4 5 6 9>;
    bindings = <&sys_reset>;
      }; 
    };
    //  | SW1 - 0 | SW2 -  1 | SW3 - 2 | SW4 - 3 |
    //  | SW5 - 4 | SW6 -  5 | SW7 - 6 | SW8 - 7 | SW9 - 8 |
    //            | SW10 - 9 | SW11-10 | SW12-11 |
 keymap {
    compatible = "zmk,keymap";

    ARTSTUDIO {
    bindings = <     
    &mt LSHFT Q &kp W &kp E &mt LC(LALT) R        
    &kp A &kp S &kp D &mt4 LA(LG(B)) B &mt RALT C   
    &mt3 LCTRL N1 &mt1 LSHFT T &mt1 RCMD X>;       
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    INFINITE {
    bindings = <     
    &kp P &kp K &kp E &mt 0 B        
    &kp W &kp G &mt4 LG(U) LG(B) &kp LS(B) &mt RALT C  
    &kp BACKSLASH &mt1 LSHFT SLASH &mt1 RCMD T>;       
    sensor-bindings = <&rot_kp LBKT RBKT>; };

    FRESCO {
    bindings = <
    &mt4 H B &kp V &kp E &mt3 LSHFT P          
    &kp W &kp LG(T) &kp L &kp G &mt3 RALT LS(F)     
    &mt3 LG(L) LG(LS(BACKSPACE)) &mt3 LSHFT LG(COMMA) &mt3 RCMD I>;    
    sensor-bindings = <&rot_kp LBKT RBKT>; };
    
    LAYERS {     
    bindings = <
    &none &none &mt4 LS(LG(I)) LG(D) &mt4 ESCAPE ENTER  
    &none &kp COMMA &kp PERIOD &mt5 LG(U) LG(B) &mt3 RALT LS(N)                       
    &mt4 LS(LG(G)) LG(G) &mt4 LA(LG(M)) LA(LG(C)) &mt3 RCMD LS(M)>;
    sensor-bindings = <&rot_kp LS(LG(LBKT)) LS(LG(RBKT))>; };

    UNDO_COPY {
    bindings = <
    &none &none &none &kp LS(LG(Z))
    &none &none &none &none &mt4 LALT LG(Z)
    &mt4 LS(LG(V)) LG(V) &mt4 LS(LG(X)) LG(X) &mt4 LS(LG(C)) LG(C)>;
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    VIEW {
    bindings = <
    &none &none &none &none
    &none &none &none &kp SEMICOLON &kp SPACE
    &mt4 LCTRL LA(H) &kp LS(H) &mt4 H LG(N0) >;    
    sensor-bindings = <&rot_kp LG(MINUS) LS(LG(SEMICOLON))>; };

    ROTATE {
    bindings = <
    &none &none &none &none
    &none &none &none &kp LA(LG(N0)) &kp LG(EQUAL)  
    &kp LS(EQUAL) &kp LC(EQUAL) &mt4 H LG(N0) >;
    sensor-bindings = <&rot_kp LG(LEFT) LG(RIGHT)>; };

    MEDIA {
    bindings = <
    &none &none &kp C_VOL_DN &kp C_VOL_UP 
    &none &none &none &none &mt5 C_MUTE C_PLAY_PAUSE
    &mo BLUE &mt5 LC(LA(LS(V))) LC(LA(LS(C))) &mt4 LC(LA(LS(W))) LC(LA(LS(X)))>;    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };
            
    BLUE {
    bindings = <
    &bt BT_SEL 0 &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_EFF
    &bt BT_SEL 1 &rgb_ug RGB_BRD &rgb_ug RGB_SAD &bt BT_CLR &rgb_ug RGB_EFR    
    &none &out OUT_TOG &ext_power EP_TOG>;    
    sensor-bindings = <&rgb_encoder>; };
    };
};

