
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>


#define MICRO 0
#define LAYERS 1
#define VIEW 2
#define SCROLLUNDO 3
#define ROTATE 4
#define CONTROLS 5
#define VOLUME 6
#define CENTERLEFT 7
#define BLUE 8
#define FRESCO 9


&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

&mt {
    tapping-term-ms = <150>;
    quick-tap-ms = <140>;
    flavor = "tap-preferred";
};

// time to max speed ms was 1000 //
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 300    // 10
//#define MOUSE_SCROLL_MAX 250
&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;      // 300
    delay-ms = <0>;                   // 0
};

/ {
    /delete-node/ encoder;
};

&pinctrl {
    qdec_default: qdec_default {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up;
        };
    };


// need second set of pins defined if deep sleep is enabled
    qdec_sleep: qdec_sleep {
        group1 {
            psels = <NRF_PSEL(QDEC_A, 1, 4)>,
                    <NRF_PSEL(QDEC_B, 1, 6)>;
            bias-pull-up; // TODO: find out if this makes sense with low-power-enable
            low-power-enable;
        };
    };
};

// Set up the QDEC hardware based driver and give it the same label as the deleted node.
encoder: &qdec0 {
    status = "okay";
    led-pre = <0>;
    steps = <36>;
    pinctrl-0 = <&qdec_default>;
    pinctrl-1 = <&qdec_sleep>;
    pinctrl-names = "default", "sleep";
};

/ { 
    combos {
    compatible = "zmk,combos";           
    LAYERS {
    timeout-ms = <100>;
    key-positions = <0 1>;
    bindings = <&mo 1>;
      };
    VIEW {
    timeout-ms = <100>;
    key-positions = <1 2>;
    bindings = <&mo 2>;
      };
    SCROLLUNDO {
    timeout-ms = <100>;
    key-positions = <0 1 2>;
    bindings = <&mo 3>;
      };
    ROTATE {
    timeout-ms = <100>;
    key-positions = <1 2 3>;
    bindings = <&mo 4>;
      };
    CONTROLS {
    timeout-ms = <100>;
    key-positions = <0 1 2 3>;
    bindings = <&mo 5>;
      };
    VOLUME {
    timeout-ms = <100>;
    key-positions = <0 3>;
    bindings = <&mo 6>;
      };
    CENTERLEFT {
    timeout-ms = <100>;
    key-positions = <4 5>;
    bindings = <&mo 7>;
      };
    K_I {
    timeout-ms = <100>;
    key-positions = <1 7>;
    bindings = <&kp I>;
      };
    K_T {
    timeout-ms = <100>;
    key-positions = <2 7>;
    bindings = <&kp T>;
      };
    K_Y {
    timeout-ms = <100>;
    key-positions = <6 10>;
    bindings = <&kp Y>;
      };
    K_G {
    timeout-ms = <100>;
    key-positions = <4 5 6>;
    bindings = <&kp G>;
      };
    RESET {
    timeout-ms = <100>;
    key-positions = <4 5 6 8>;
    bindings = <&sys_reset>;
      };
    };
    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |
behaviors {
    rot_scroll: rot_scroll {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_SCROLL";
      #sensor-binding-cells = <2>;
      bindings = <&msc>, <&msc>;
      }; 
    rot_kp: rot_kp {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ROT_KP";
      #sensor-binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      };
    mt0: mt0 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP0";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <120>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      };
    mt1: mt1 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP1";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <160>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt2: mt2 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP2";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <170>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    mt3: mt3 {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_TAP_TAP3";
      #binding-cells = <2>;
      flavor = "tap-preferred"; // was hold-preferred
      tapping-term-ms = <200>;
      quick-tap-ms = <110>;
      bindings = <&kp>, <&kp>;
      }; 
    kp_mkp: kp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP";
      #binding-cells = <2>;
      tapping-term-ms = <130>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    kp_mkp0: kp_mkp0 {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_MKP0";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&mkp>;
      };
    mkp_kp: mkp_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "MKP_KP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&kp>;
      };
    mkp_mkp: mkp_mkp {
      compatible = "zmk,behavior-hold-tap";
      label = "MOUSE_CLICK1";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <100>;
      flavor = "tap-preferred";
      bindings = <&mkp>, <&mkp>;
      };        
    rgb_encoder: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "RGB_ENCODER";
      #sensor-binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      };
  };
    //  | SW1- 0 | SW2-  1 | SW3-  2 | SW4-  3 |
    //  | SW5- 4 | SW6-  5 | SW7-  6 | SW7-  7 |
    //           | SW9-  8 | SW10- 9 | SW11-10 |
 keymap {
    compatible = "zmk,keymap";

    MICRO {
    label = "MICRO";
    bindings = <     
    &mt3 LCMD K &kp B &kp E &kp LS(B)          
    &kp F &kp V &mt3 W L &mt LALT C      
    &mt3 BACKSLASH SLASH &mt LSHFT T &mt O LCMD>;
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };
    
    LAYERS {
    label = "LAYERS";    
    bindings = <
    &none &none &kp LG(D) &kp ENTER  
    &none &none &kp LS(LG(I)) &mt LSHFT LG(N)                       
    &mt3 LCTRL LG(V) &mt3 RALT LG(X) &mt LCMD LG(C)>;
    
    sensor-bindings = <&rot_kp LG(N1) LG(N4)>; };

    VIEW {
    label = "VIEW";
    bindings = <
    &kp LSHFT &none &none &mt SPACE R
    &kp LA(LG(V)) &none &kp V &mt LSHFT LG(N0)
    &kp LCTRL &kp RALT &mt LCMD H>;
    
    sensor-bindings = <&rot_scroll SCRL_DOWN SCRL_UP>; };

    SCROLLUNDO {
    label = "SCROLLUNDO";
    bindings = <
    &none &none &none &none
    &kp LSHFT  &none &none &kp LS(LG(Z))
    &kp LCTRL &kp RALT &kp LG(Z)>;
    
    sensor-bindings = <&rot_kp LG(Z) LS(LG(Z))>; };

    ROTATE {
    label = "ROTATE";
    bindings = <
    &none &none &none &none
    &kp LSHFT  &none &none &kp LA(N0)
    &kp LCTRL &kp RALT &kp LCMD>;
    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    CONTROLS {
    label = "CONTROLS";
    bindings = <
    &none &none &none &none
    &kp F19 &kp LC(LA(LS(LG(W)))) &mt3 LG(INT1) LC(LA(LG(V))) &mt3 LSHFT C_PLAY_PAUSE   
    &mt LCTRL LC(LA(LG(Z))) &mt RALT LG(LC(LA(X))) &mt LCMD LG(LC(LA(C)))>;
    
    sensor-bindings = <&rot_kp LEFT RIGHT>; };

    VOLUME {
    label = "VOLUME";
    bindings = <
    &none &none &none &none
    &none &none &none &kp C_PLAY_PAUSE
    &kp RCTRL &kp LALT &kp RCMD>;
    sensor-bindings = <&rot_kp C_VOL_DN C_VOL_UP>; };

    CENTERLEFT {
    label = "CENTERLEFT";
    bindings = <
    &mo BLUE &tog 9 &mt3 LC(LA(LS(LG(X)))) LC(LS(DOWN)) &mt3 LC(LA(LS(LG(C)))) LC(LS(UP))            
    &none &none &mt3 LC(LA(LS(LG(A)))) LC(LA(LS(LG(D)))) &mt3 LC(LA(LS(LG(S)))) C_PLAY_PAUSE
    &kp LC(LA(LS(LG(B)))) &kp LC(LA(LS(LG(Z)))) &kp LC(LA(LS(LG(V))))>;  
    
    sensor-bindings = <&rot_kp LC(LA(LS(LG(N)))) LC(LA(LS(LG(M))))>; };
            
    BLUE {
    label = "BLUE";
    bindings = <
    &none &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_SAI
    &bt BT_SEL 0 &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_SAD      
    &bt BT_CLR &out OUT_TOG &ext_power EP_TOG>;
    
    sensor-bindings = <&rgb_encoder>; };

    FRESCO {
    label = "FRESCO";
    bindings = <
    &kp H &kp V &mt TILDE E &mt3 B P          
    &kp G &kp LG(T) &mt3 W L &mt LALT I      
    &mt3 LG(L) LG(LS(DELETE)) &mt LSHFT LG(COMMA) &mt LCMD LS(H)>;
    
    sensor-bindings = <&rot_kp LBKT RBKT>; };
    };
};